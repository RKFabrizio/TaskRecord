@model Query

@{
    ViewData["Title"] = "ReporteDetail";
    Layout = "~/Views/Shared/_LayoutApp.cshtml";
}


@section PagePreTitle{

    <div class="col">
     <!-- Page pre-title -->
        <div class="page-pretitle">
            Mantenimiento
        </div>
        <h2 class="page-title">
            Gestion de Pautas
        </h2>
    </div>

}

@section PageActions{
        <a href="/EstructuraPM/Reporte" class="btn btn-white d-none d-sm-inline-block">
        <!-- Download SVG icon from http://tabler-icons.io/i/plus -->
        <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-arrow-back" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M9 11l-4 4l4 4m-4 -4h11a4 4 0 0 0 0 -8h-1"></path>
        </svg>
        Regresar
        </a>
        <a href="/EstructuraPM/Reporte" class="btn btn-white d-sm-none btn-icon">
        <!-- Download SVG icon from http://tabler-icons.io/i/plus -->
        <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-arrow-back" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M9 11l-4 4l4 4m-4 -4h11a4 4 0 0 0 0 -8h-1"></path>
        </svg>
        </a>

}

<div class="row row-cards">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Reporte Nro. @Model.id</h3>
            </div>
            <div class="card-body">
                <div class="form-group mb-1 ">
                    <div class="row">
                        <div class="col-lg-5">
                            <label class="form-label">PM</label>
                            <label class="form-control"style="background-color: ghostwhite;">@Model.texto1</label>
                        </div>
                        <div class="col-lg-5">
                                <label class="form-label">Unidad</label>
                                <label class="form-control"style="background-color: ghostwhite;">@Model.texto2</label>
                        </div>
                        <div class="col-lg-2">
                            <label class="form-label">Horómetro</label>
                            <label class="form-control" style="background-color: ghostwhite;">@Model.valor1</label>
                        </div>
                    </div>
                </div>
                <div class="form-group mb-1">
                    <div class="row">
                        
                        <div class="col-lg-4">
                            <label class="form-label">Lider</label>
                            <label class="form-control" style="background-color: ghostwhite;">@Model.texto3</label>
                        </div>
                        <div class="col-lg-4">
                            <label class="form-label">Técnico</label>
                            <label class="form-control"style="background-color: ghostwhite;">@Model.texto4</label>
                        </div>
                        <div class="col-lg-2">
                            <label class="form-label">Fecha</label>
                            <label class="form-control" style="background-color: ghostwhite;">@Model.fecha1.Value.ToString("dd-MM-yyyy")</label>
                        </div>
                        <div class="col-lg-2">
                            <label class="form-label">Habilitado</label>
                                @{
                                if (@Model.habilitado == true)
                                {
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-checkbox text-green" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                           <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                                           <polyline points="9 11 12 14 20 6"></polyline>
                                                           <path d="M20 12v6a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2h9"></path>
                                                        </svg>
                                }
                                else
                                {
                                    
                                }
                            }
                        </div>
                    </div>
                </div>
                 <div class="form-group mb-3">
                    <div class="row">
                            <div class="col-md-11">
                            <label class="form-label">Reporte Sistema</label> 
                        </div>
                    </div>
                    <div class='form-control'>
                        <div class="col-md-12">

                            @(Html.DevExtreme().TabPanel()
                                            
                                .Items(items => {
                                    items.Add()
                                        .Title("EQUIPO HUMANO")
                                        .Template(new TemplateName("TAB0"));
                                    items.Add()
                                        .Title("EQUIPO EN MARCHA")
                                        .Template(new TemplateName("TAB1"));
                                    items.Add()
                                        .Title("EQUIPO DETENIDO")
                                        .Template(new TemplateName("TAB2"));
        
                                    items.Add()
                                        .Title("REPORTE DE ENTREGA")
                                        .Template(new TemplateName("TAB3"));

                                })
                                .SelectedIndex(0)
                                .Loop(false)
                                .AnimationEnabled(true)
                                .SwipeEnabled(true)
                            )
                        </div>                 
                     </div>
                </div>
                <div class="form-group mb-1">
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="mb-2">
                                    @using(Html.BeginForm()) {
                                    using(Html.DevExtreme().ValidationGroup()) {
                                        @Html.AntiForgeryToken()
                                        @(Html.DevExtreme().Form<TSK.Models.Query>()
                                            .ShowValidationSummary(true)
                                            .LabelLocation(FormLabelLocation.Top)
                                            .Items(items => {
                                                items.AddGroup()
                                    
                                                    .Items(groupItems => {
                                                        groupItems.AddSimpleFor(m => m.texto5)
                                                            .ColSpan(2)
                                                            .Editor(e => e
                                                                .TextArea()
                                                                .Height(90)
                                                            )
                                                            .Label(l => l.Text("Descripción"));

                                        
                                                    }); 
                                                items.AddButton()
                                                    .HorizontalAlignment(HorizontalAlignment.Center)
                                                    .ButtonOptions(b => b.Text("Actualiza")
                                                        .Type(ButtonType.Default)
                                                        .UseSubmitBehavior(true)
                                                );

                                            })
                                            .FormData(Model)
                                        )
                                    }
                                }
                            </div>


 
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

@using (Html.DevExtreme().NamedTemplate("TAB0"))
{
    @Html.DevExtreme().Button().ID("openPopupButton1").Text("Grupo 1").OnClick("openForm")
    @Html.DevExtreme().Button().ID("openPopupButton2").Text("Grupo 2").OnClick("openForm")
    @Html.DevExtreme().Button().ID("openPopupButton3").Text("Grupo 3").OnClick("openForm")
    @Html.DevExtreme().Button().ID("openPopupButton4").Text("Grupo 4").OnClick("openForm")
    @Html.DevExtreme().Popup().ID("myPopup").Title("Grupo Humano "+ Model.id).Content(@<text>
        
        @(Html.DevExtreme().Form<TSK.Models.Entity.GrupoUsuario>()
    .Items(items => {

        items.AddSimpleFor(m => m.IdUsr)
            .Editor(e => e
                .Lookup()
                .DataSource(ds => ds.WebApi().Controller("GrupoUsuarios").LoadAction("UsuarioLookup").LoadParams(new {idPos = 1}).Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            );
        items.AddSimpleFor(m => m.IdUsr)
            .Editor(e => e
                .Lookup()
                .DataSource(ds => ds.WebApi().Controller("GrupoUsuarios").LoadAction("UsuarioLookup").LoadParams(new {idPos = 2}).Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
          );
    })
)
        
        </text>).Visible(false)


}

@using (Html.DevExtreme().NamedTemplate("TAB1"))
{
    @(Html.DevExtreme().DataGrid<TSK.Models.Entity.RepSistema>()
        .ID("gridContainer1")
        .DataSource(ds => ds.Mvc()
            .Controller("ReporteSistema")
            .LoadAction("GetCondicion")
            .LoadParams(new { idRep = new JS(@Model.id.ToString()), idCod = "PC" })
            .Key("IdRepsis")
        )
        .ShowBorders(true)
        .RemoteOperations(true)
        .ShowColumnLines(true)
        .ShowRowLines(true)
        .AllowColumnResizing(true)
        .Selection(s => s.Mode(SelectionMode.Single))
                .Export(e => e.Enabled(true)
                    .Formats(new[] { "pdf" })
                )
        .OnExporting("exportHeadToPDF")
        .Columns(columns =>
        {
            columns.AddFor(m => m.NomSistema).Caption("Sistema");
            columns.AddFor(m => m.Avance)
                .Caption("% Avance")
                .DataType(GridColumnDataType.Number)
                .Alignment(HorizontalAlignment.Left)
                .Format(Format.Percent)
                .AllowGrouping(false)
                .CssClass("bullet")
                .CellTemplate(@<text>
                    @(Html.DevExtreme().Bullet()
            .Value(new JS("value * 100"))
            .Size(s => s
            .Height(18)
            .Width(100)
            )
            .Color("green")
            .Margin(m => m
            .Top(5)
            .Bottom(0)
            .Left(5)
            )
            .ShowTarget(false)
            .ShowZeroLevel(true)
            .StartScaleValue(0)
            .EndScaleValue(100)
            .Tooltip(t => t
            .Enabled(true)
            .Font(f => f.Size(15))
            .PaddingTopBottom(2)
            .CustomizeTooltip("customizeTooltip")
            )
            )
                    </text>).Width(110);




        })
        .MasterDetail(m => m
            .Enabled(true)
            .Template(new TemplateName("gridContainer-details1"))
            )
        .Summary(s => s.TotalItems(items =>
        {
            items.AddFor(m => m.NomDisciplina)
               .DisplayFormat("Porcentaje Total de Avance:")
               .Alignment(HorizontalAlignment.Right)
               .ValueFormat(Format.Percent);
            items.AddFor(m => m.Avance)
               .SummaryType(SummaryType.Avg)
               .DisplayFormat("{0}")
               .Alignment(HorizontalAlignment.Center)
               .ValueFormat(Format.Percent);
        })
            )
        )
}

@using (Html.DevExtreme().NamedTemplate("TAB2"))
{
    
    @(Html.DevExtreme().DataGrid<TSK.Models.Entity.RepSistema>()
    .ID("gridContainer2")
    .DataSource(ds => ds.Mvc()
        .Controller("ReporteSistema")
        .LoadAction("GetCondicion")
        .LoadParams(new { idRep = new JS(@Model.id.ToString()), idCod = "SB" })
        .Key("IdRepsis")
    )
    .ShowBorders(true)
    .RemoteOperations(true)
    .ShowColumnLines(true)
    .ShowRowLines(true)
    .AllowColumnResizing(true)
    .Selection(s => s.Mode(SelectionMode.Single))
            .Export(e => e.Enabled(true)
                .Formats(new[] { "pdf" })
            )
    .OnExporting("exportHeadToPDF")
    .Columns(columns => {
        columns.AddFor(m => m.NomSistema).Caption("Sistema");
        columns.AddFor(m => m.Avance)
            .Caption("% Avance")
            .DataType(GridColumnDataType.Number)
            .Alignment(HorizontalAlignment.Left)
            .Format(Format.Percent)
            .AllowGrouping(false)
            .CssClass("bullet")
            .CellTemplate(@<text>
                            @(Html.DevExtreme().Bullet()
                    .Value(new JS("value * 100"))
                    .Size(s => s
                        .Height(18)
                        .Width(100)
                    )
                    .Color("green")
                    .Margin(m => m
                        .Top(5)
                        .Bottom(0)
                        .Left(5)
                    )
                    .ShowTarget(false)
                    .ShowZeroLevel(true)
                    .StartScaleValue(0)
                    .EndScaleValue(100)
                    .Tooltip(t => t
                        .Enabled(true)
                        .Font(f => f.Size(15))
                        .PaddingTopBottom(2)
                        .CustomizeTooltip("customizeTooltip")
                    )
                            )
    </text>).Width(110);
    })
    .MasterDetail(m => m
        .Enabled(true)
        .Template(new TemplateName("gridContainer-details2"))
        )
    .Summary(s => s.TotalItems(items => {
         items.AddFor(m => m.NomDisciplina)
            .DisplayFormat("Porcentaje Total de Avance:")
            .Alignment(HorizontalAlignment.Right)
            .ValueFormat(Format.Percent);
         items.AddFor(m => m.Avance)
            .SummaryType(SummaryType.Avg)
            .DisplayFormat("{0}")
            .Alignment(HorizontalAlignment.Center)
            .ValueFormat(Format.Percent);
            
            })
        )
    )
    
}

@using (Html.DevExtreme().NamedTemplate("TAB3"))
{
    @(Html.DevExtreme().DataGrid<TSK.Models.Entity.RepEntrega>()
        .DataSource(ds => ds.Mvc()
            .Controller("RepEntrega")
            .LoadAction("GetId")
            .UpdateAction("Put")
            .LoadParams(new { id = new JS(@Model.id.ToString()) })
            .Key("IdRent")
        )
        .ShowBorders(true)
        .Paging(paging => paging.PageSize(50))
        .RemoteOperations(true)
        .ShowColumnLines(true)
        .ShowRowLines(true)
        .AllowColumnResizing(true)
        .Columns(columns => {
            columns.AddFor(m => m.IdEnt).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("RepEntrega").LoadAction("EntregasLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Control de componentes y sistemas").AllowEditing(false);
            columns.AddFor(m => m.Resultado).Caption("Resultados").Width(150);
        })
        .Editing(e => e.Mode(GridEditMode.Cell)
            .AllowUpdating(true)
            .UseIcons(true)
        )
        .Selection(s => s.Mode(SelectionMode.Single))
            .Export(e => e.Enabled(true)
                .Formats(new[] { "pdf" })
            )
        .OnExporting("exportEntregaToPDF")
    )
}

@using (Html.DevExtreme().NamedTemplate("gridContainer-details1")) {
    @(Html.DevExtreme().DataGrid<TSK.Models.Entity.RepDetalle>()
            .DataSource(d => d.Mvc()
                .Controller("RepDetalle")
                .LoadAction("GetDetails")
                .LoadParams(new { id = new JS("data.IdRepsis") })
                .UpdateAction("Put")
                .Key("IdAct", "IdRepsis")
            )
            .ColumnAutoWidth(true)
            .AllowColumnResizing(true)
            .ShowColumnLines(true)
            .ShowRowLines(true)
            .ShowBorders(true)
            .Paging(paging => paging.PageSize(50))
            .Columns(columns => {
                columns.AddFor(m => m.Titulo).Caption("Actividades").AllowEditing(false);
                columns.AddFor(m => m.Especificacion).AllowEditing(false);
                columns.AddFor(m => m.Valor).Width(50);                    
                columns.AddFor(m => m.IdEst).Caption("Estado").Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("RepDetalle").LoadAction("EstadoLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            );
                columns.Add().DataField("Referencia").AllowEditing(false)
                    .Alignment(HorizontalAlignment.Center)
                    .Width(100)
                    .CellTemplate(@<text>
                                <a href="<%- data.ReferenciaURL %>" target="_blank" title="<%- value %>">
                                   <%- value %>
                                </a>
    </text>);
                columns.AddFor(m => m.Observacion).Caption("Observaciones");

            })
            .Editing(e => e.Mode(GridEditMode.Cell)
                .AllowUpdating(true)
                .UseIcons(true)                              
            )
            .Selection(s => s.Mode(SelectionMode.Single))
            .Export(e => e.Enabled(true)
                .AllowExportSelectedData(false)
                .Formats(new[] { "pdf" })
            )
            .OnExporting("exportDetailToPDF")
            
            .OnRowUpdated("gridChild_OnRowUpdated1")
    )
}

@using (Html.DevExtreme().NamedTemplate("gridContainer-details2")) {
    @(Html.DevExtreme().DataGrid<TSK.Models.Entity.RepDetalle>()
            .DataSource(d => d.Mvc()
                .Controller("RepDetalle")
                .LoadAction("GetDetails")
                .LoadParams(new { id = new JS("data.IdRepsis") })
                .UpdateAction("Put")
                .Key("IdAct", "IdRepsis")
            )
            .ColumnAutoWidth(true)
            .AllowColumnResizing(true)
            .ShowColumnLines(true)
            .ShowRowLines(true)
            .ShowBorders(true)
            .Paging(paging => paging.PageSize(50))
            .Columns(columns => {
                columns.AddFor(m => m.Titulo).Caption("Actividades").AllowEditing(false);
                columns.AddFor(m => m.Especificacion).AllowEditing(false);
                columns.AddFor(m => m.Valor).Width(50);                    
                columns.AddFor(m => m.IdEst).Width(70);
                columns.Add().DataField("Referencia").AllowEditing(false)
                    .Alignment(HorizontalAlignment.Center)
                    .Width(100)
                    .CellTemplate(@<text>
                                <a href="<%- data.ReferenciaURL %>" target="_blank" title="<%- value %>">
                                   <%- value %>
                                </a>
    </text>);
                columns.AddFor(m => m.Observacion).Caption("Observaciones");

            })
            .Editing(e => e.Mode(GridEditMode.Cell)
                .AllowUpdating(true)
                .UseIcons(true)                              
            )
            .Selection(s => s.Mode(SelectionMode.Single))
            .Export(e => e.Enabled(true)
                .AllowExportSelectedData(false)
                .Formats(new[] { "pdf" })
            )
            .OnExporting("exportDetailToPDF")
            
            .OnRowUpdated("gridChild_OnRowUpdated2")
    )
}


<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

<script>
    window.jsPDF = window.jspdf.jsPDF;

    //Funcion de Popup Grupo Humano
    function openForm() {
    $("#myPopup").dxPopup("show");
     }

    function customizeTooltip(pointsInfo) {
        return { text: parseInt(pointsInfo.originalValue) + "%" };
    }
    function exportHeadToPDF(e) {
        var doc = new jsPDF();
        
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: e.component,
            indent: 5,
        }).then(function () {
            doc.save("Sistema.pdf");
        });
    }

    function exportDetailToPDF(e) {
        var doc = new jsPDF();
        
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: e.component,
            indent: 5,
        }).then(function () {
            doc.save("Detalle.pdf");
        });
    }

    function exportEntregaToPDF(e) {
        var doc = new jsPDF();
        
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: e.component,
            indent: 5,
        }).then(function () {
            doc.save("Entrega.pdf");
        });
    }

    function gridChild_OnRowUpdated1(e){  
        setTimeout(function() {
            var dataGrid = $('#gridContainer1').dxDataGrid('instance');
            dataGrid.refresh();
        });
    } 

    function gridChild_OnRowUpdated2(e){  
        setTimeout(function() {
            var dataGrid = $('#gridContainer2').dxDataGrid('instance');
            dataGrid.refresh();
        });
    } 
</script>