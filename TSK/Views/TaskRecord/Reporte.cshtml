@{
    ViewData["Title"] = "Reporte";
    Layout = "~/Views/Shared/_LayoutApp.cshtml";
}

<style>
    .user-icon-container {
        display: flex;
        align-items: center;
    }

        .user-icon-container .icon-tabler {
            margin-right: 10px;
            width: 50px;
            height: 50px;
        }

        .user-icon-container .page-title {
            margin-left: -4px;
        }

    .page-title {
        color: #a79a66;
    }

</style>

@section PagePreTitle{

    <div class="col">
        <!-- Page pre-title -->
        <div class="user-icon-container">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-report-analytics" width="36" height="36" viewBox="0 0 24 24" stroke-width="1" stroke="#a79a66" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M9 5h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2h-2" />
                <rect x="9" y="3" width="6" height="4" rx="2" />
                <path d="M9 17v-5" />
                <path d="M12 17v-1" />
                <path d="M15 17v-3" />
            </svg>
            <h2 class="page-title">
                Gestión de Pautas de Mantenimiento
            </h2>
        </div>
    </div>


}

@section PageActions{


}
<div style="text-align: right;" >
    @(Html.DevExtreme().CheckBox()
        .Text("Mostrar todos los reportes")
        .ElementAttr(new { style = "margin-right: 15px; font-size: 15px; margin-bottom: 10px; margin-top:10px; font-weight:bold;" })
        .OnValueChanged("toggleFilter")
        )
</div>

@(Html.DevExtreme().DataGrid<TSK.Models.Entity.Reporte>()
        .ID("grid1")
        .DataSource(ds => ds.Mvc()
            .Controller("Reporte")
            .LoadAction("Get")
            .InsertAction("Post")
            .UpdateAction("Put")
            .Key("IdRep")
        )
        .OnContentReady("applyDefaultFilter")
        .Selection(s => s.Mode(SelectionMode.Single))
        .Columns(columns =>
        {
            columns.AddFor(m => m.IdRep).Caption("ID").Width(70);
            columns.AddFor(m => m.IdPm).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("Reporte").LoadAction("PmsLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).GroupIndex(0).Caption("PM");
            columns.AddFor(m => m.IdUni).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("Reporte").LoadAction("UnidadsFlotaLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).Caption("Unidad");
            columns.AddFor(m => m.Fecha);
            columns.AddFor(m => m.Horometro).Caption("Horómetro");
            columns.AddFor(m => m.Comentario);
            columns.AddFor(m => m.Avance)
                .Caption("% Avance")
                .DataType(GridColumnDataType.Number)
                .Alignment(HorizontalAlignment.Center)
                .Format(Format.Percent)
                .Width(130);
            columns.AddFor(m => m.Habilitado).Caption("Finalizado");
        })
        .ShowBorders(true)
        .ShowColumnLines(true)
        .ShowRowLines(true)
        .Paging(paging => paging.PageSize(20))
        .FilterRow(f => f.Visible(true))
        .HeaderFilter(f => f.Visible(true))
        .SearchPanel(searchPanel => searchPanel.Visible(true))
        .Pager(pager =>
        {
            pager.ShowPageSizeSelector(true);
            pager.AllowedPageSizes(new[] { 20, 50, 100 });
            pager.ShowInfo(true);
        })
        .OnSelectionChanged("selection_changed")
        .RemoteOperations(true)
        .Grouping(grouping => grouping.AutoExpandAll(true))
        .GroupPanel(groupPanel => groupPanel
            .EmptyPanelText("Arrastre un encabezado de columna aquí para agrupar por esa columna")
            .Visible(true))
        .Editing(e => e.Mode(GridEditMode.Popup)
                .AllowAdding(true)
                .AllowUpdating(true)
                .UseIcons(true)
                .Popup(p => p
                    .Title("Gestión de Pautas de Mantenimiento")
                    .ShowTitle(true)
                    .Width("70%")
                    .Height(500)
                )
                .Form(f => f.Items(items =>
                {
                    items.AddGroup()
                        .ColCount(2)
                        .ColSpan(2)
                        .Items(groupItems =>
                        {
                            groupItems.AddSimpleFor(m => m.IdPm).ColSpan(2)
                            .Editor(editor => editor
                             .Lookup()
                             .ID("pmsLookup") // Asignamos un ID al Lookup de Pms
                             .DataSource(ds => ds.WebApi().Controller("Reporte").LoadAction("PmsLookup1").Key("Value"))
                             .ValueExpr("Value")
                             .DisplayExpr("Text")
                        );

                            groupItems.AddSimpleFor(m => m.IdUni).ColSpan(2)
                            .Editor(editor => editor
                                .Lookup()
                                .DataSource(ds => ds.WebApi().Controller("Reporte").LoadAction("UnidadsFlotaLookup").Key("Value"))
                                .ValueExpr("Value")
                                .DisplayExpr("Text")
                            );

                            groupItems.AddSimpleFor(m => m.Fecha)
                            .Editor(e => e
                            .DateBox()
 
                            .Width("100%")
                            .ShowDropDownButton(true)
                            )
                            ;

                            groupItems.AddSimpleFor(m => m.Horometro);
                            groupItems.AddSimpleFor(m => m.Comentario).ColSpan(2)
    .Label(label => label.Location(FormLabelLocation.Top).Text("Comentario de la pauta"))
    .Editor(editor => editor.TextArea().Height(100));
                            groupItems.AddSimpleFor(m => m.Habilitado)
                            .Label(label => label.Location(FormLabelLocation.Left))
                            .Editor(e => e
                            .CheckBox()
                            .Value(false)
                            );
                        });
                }))
            )
    )



<script>
    function selection_changed(selectedItems) {
        var data = selectedItems.selectedRowsData[0];
        if (data) {
            $(location).attr('href', 'ReporteDetalle/' + data.IdRep);

        }
    }

  
        var defaultFilterApplied = false;

    function applyDefaultFilter() {
        if (!defaultFilterApplied) {
            var grid = $("#grid1").dxDataGrid("instance");
            grid.filter([
                ["Habilitado", "=", false]
            ]);
            defaultFilterApplied = true;
        }
    }

    function toggleFilter(e) {
        var grid = $("#grid1").dxDataGrid("instance");

        if (e.value) {
            grid.clearFilter();
        } else {
            grid.filter([
                ["Habilitado", "=", false]
            ]);
        }
    }

    function onPmsLookupValueChanged(e) {
        var flotaId = e.selectedItem ? e.selectedItem.IdFlt : null; // Recuperamos el ID de Flota asociado con el PM seleccionado
        var unidadLookup = $("#grid1").find("#unidadLookup").dxLookup("instance"); // Obtenemos la instancia del Lookup de Unidades utilizando el ID correcto

        unidadLookup.getDataSource().filter(flotaId ? ["IdFlt", "=", flotaId] : null); // Establecemos el filtro en el Lookup de Unidades
        unidadLookup.getDataSource().load(); // Recargamos el Lookup de Unidades
    }
</script>

